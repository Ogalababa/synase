{
	"name": "mapping_country",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "go_sales_branch",
						"type": "DatasetReference"
					},
					"name": "goSalesBranch"
				},
				{
					"dataset": {
						"referenceName": "Country",
						"type": "DatasetReference"
					},
					"name": "country"
				},
				{
					"dataset": {
						"referenceName": "anc_customer",
						"type": "DatasetReference"
					},
					"name": "ancCustomer"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "dimGoLocation"
				},
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "dimAncCustomer"
				}
			],
			"transformations": [
				{
					"name": "joinCountry"
				},
				{
					"name": "mappingDimLoacation"
				},
				{
					"name": "mappingANCcustomer"
				}
			],
			"scriptLines": [
				"parameters{",
				"     go as string ('go')",
				"}",
				"source(output(",
				"          SALES_BRANCH_CODE as integer,",
				"          ADDRESS1 as string,",
				"          ADDRESS2 as string,",
				"          CITY as string,",
				"          REGION as string,",
				"          POSTAL_ZONE as string,",
				"          COUNTRY_CODE as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> goSalesBranch",
				"source(output(",
				"          COUNTRY_CODE as integer,",
				"          COUNTRY as string,",
				"          LANGUAGE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> country",
				"source(output(",
				"          id as integer,",
				"          fname as string,",
				"          lname as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          phone as string,",
				"          company_name as string,",
				"          type as string,",
				"          discount as integer,",
				"          max_quantity_order as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ancCustomer",
				"goSalesBranch, country join(goSalesBranch@COUNTRY_CODE == country@COUNTRY_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCountry",
				"joinCountry derive(LocationID = concatWS('_', toString(SALES_BRANCH_CODE), '_GO')) ~> mappingDimLoacation",
				"ancCustomer derive(LocationID = concatWS('_', toString(id), '_ANC_CUSTOMER'),",
				"          Adress2 = '',",
				"          Country = '') ~> mappingANCcustomer",
				"mappingDimLoacation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'dim_go_location',",
				"     truncate: true,",
				"     filePattern:'dim_go_location_stagging.parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dimGoLocation",
				"mappingANCcustomer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'dimAncCustomer',",
				"     truncate: true,",
				"     compressionCodec: 'none',",
				"     filePattern:'dim_anc_Cus_location_stagging.parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dimAncCustomer"
			]
		}
	}
}