{
	"name": "mapping_fact_salesorder",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dim_product_anc",
						"type": "DatasetReference"
					},
					"name": "ProductID"
				},
				{
					"dataset": {
						"referenceName": "dwh_go_customer",
						"type": "DatasetReference"
					},
					"name": "CustomerID"
				},
				{
					"dataset": {
						"referenceName": "dwh_anc_employee",
						"type": "DatasetReference"
					},
					"name": "EmployeeID"
				},
				{
					"dataset": {
						"referenceName": "db_go_order_details",
						"type": "DatasetReference"
					},
					"name": "orderdetailsGO"
				},
				{
					"dataset": {
						"referenceName": "go_order_header",
						"type": "DatasetReference"
					},
					"name": "orderHeader"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "goDalesorder"
				}
			],
			"transformations": [
				{
					"name": "LineTotal"
				},
				{
					"name": "joinOrderHeader"
				},
				{
					"name": "EmployeelKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductKey as string,",
				"          ProductID as integer,",
				"          Productname as string,",
				"          Producttype as integer,",
				"          Productioncost as double,",
				"          Productcode as string,",
				"          Productcatagory as string,",
				"          Productdescription as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductID",
				"source(output(",
				"          CustomerKey as string,",
				"          CustomerID as integer,",
				"          DIM_Customerlocation as string,",
				"          Name as string,",
				"          Discount as integer,",
				"          Companyname as string,",
				"          Customeradress as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerID",
				"source(output(",
				"          Employeekey as string,",
				"          EployeeID as integer,",
				"          DepartmentID as integer,",
				"          Firstname as string,",
				"          Lastname as string,",
				"          Department as string,",
				"          Employeestatus as integer,",
				"          Startdate as date,",
				"          Enddate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EmployeeID",
				"source(output(",
				"          ORDER_DETAIL_CODE as integer,",
				"          ORDER_NUMBER as integer,",
				"          PRODUCT_NUMBER as integer,",
				"          QUANTITY as integer,",
				"          UNIT_COST as double,",
				"          UNIT_PRICE as double,",
				"          UNIT_SALE_PRICE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderdetailsGO",
				"source(output(",
				"          ORDER_NUMBER as integer,",
				"          RETAILER_NAME as string,",
				"          RETAILER_SITE_CODE as integer,",
				"          RETAILER_COUNTACT_CODE as integer,",
				"          SALES_STAFF_CODE as integer,",
				"          SALES_BRANCH_CODE as integer,",
				"          ORDER_DATE as timestamp,",
				"          ORDER_METHOD_CODE as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderHeader",
				"orderdetailsGO derive(LineTotal = QUANTITY*UNIT_SALE_PRICE,",
				"          DiscountUnitPrice = UNIT_SALE_PRICE,",
				"          ActualUnitPrice = UNIT_SALE_PRICE) ~> LineTotal",
				"LineTotal, orderHeader join(orderdetailsGO@ORDER_NUMBER == orderHeader@ORDER_NUMBER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrderHeader",
				"joinOrderHeader derive(EmployeeKey = concatWS('_', toString(SALES_STAFF_CODE), 'GO'),",
				"          DateID = toDate(ORDER_DATE) - toDate(toTimestamp('1970-01-01', 'yyyy-MM-dd')),",
				"          SalesorderID = concatWS('_', concatWS('_', toString(ORDER_DETAIL_CODE), toString(PRODUCT_NUMBER)), toString(QUANTITY)),",
				"          LocationID = concatWS(\"_\", toString(SALES_BRANCH_CODE),\"GO\",\"Branch\"),",
				"          CustomerID = concatWS(\"_\", toString(RETAILER_SITE_CODE),\"GO\"),",
				"          ProductID = concatWS('_', toString(PRODUCT_NUMBER), 'GO')) ~> EmployeelKey",
				"EmployeelKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'fact_Salesorder',",
				"     truncate: true,",
				"     compressionCodec: 'none',",
				"     partitionFileNames:['fact_salesorder_stagging.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> goDalesorder"
			]
		}
	}
}