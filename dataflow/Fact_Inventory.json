{
	"name": "Fact_Inventory",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "go_inventory_level",
						"type": "DatasetReference"
					},
					"name": "goInventoryLevel"
				},
				{
					"dataset": {
						"referenceName": "dim_anc_product",
						"type": "DatasetReference"
					},
					"name": "ancProduct"
				},
				{
					"dataset": {
						"referenceName": "dwh_dim_product",
						"type": "DatasetReference"
					},
					"name": "dwhProduct"
				},
				{
					"dataset": {
						"referenceName": "dim_go_product",
						"type": "DatasetReference"
					},
					"name": "goProduct"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "GOINVENTORY"
				}
			],
			"transformations": [
				{
					"name": "join1PRODUCT"
				},
				{
					"name": "ADDKEY"
				},
				{
					"name": "SINK"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INVENTORY_YEAR as integer,",
				"          INVENTORY_MONTH as integer,",
				"          PRODUCT_NUMBER as integer,",
				"          INVENTORY_COUNT as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> goInventoryLevel",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          description as string,",
				"          prod_size as string,",
				"          color as string,",
				"          quantity as integer,",
				"          unit_price as decimal(18,0),",
				"          picture_name as string,",
				"          category as string,",
				"          Source as string,",
				"          ProductKey as string,",
				"          ProductID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ancProduct",
				"source(output(",
				"          ProductKey as string,",
				"          ProductID as integer,",
				"          Productname as string,",
				"          Producttype as integer,",
				"          Productioncost as integer,",
				"          Productcode as string,",
				"          Productcatagory as string,",
				"          Productdescription as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dwhProduct",
				"source(output(",
				"          PRODUCT_NUMBER as integer,",
				"          INTRODUCTION_DATE as timestamp,",
				"          PRODUCT_TYPE_CODE as integer,",
				"          PRODUCTION_COST as double,",
				"          MARGIN as double,",
				"          PRODUCT_IMAGE as string,",
				"          PRODUCT_NAME as string,",
				"          PRODUCT_LINE_CODE as integer,",
				"          PRODUCT_TYPE_EN as string,",
				"          Source as string,",
				"          ProductID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> goProduct",
				"goInventoryLevel, goProduct join(goInventoryLevel@PRODUCT_NUMBER == goProduct@PRODUCT_NUMBER,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1PRODUCT",
				"join1PRODUCT derive(InventorymanagementID = concatWS('_', concatWS('_', concatWS('_', toString(goInventoryLevel@PRODUCT_NUMBER), toString(INVENTORY_YEAR)), toString(INVENTORY_MONTH)),\"GO\"),",
				"          TotalPrice = PRODUCTION_COST*INVENTORY_COUNT,",
				"          Totalamount = INVENTORY_COUNT,",
				"          Unitprice = PRODUCTION_COST) ~> ADDKEY",
				"ADDKEY select(mapColumn(",
				"          InventorymanagementID,",
				"          TotalPrice,",
				"          Totalamount,",
				"          Unitprice",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SINK",
				"SINK sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'Fact_inventory_go',",
				"     truncate: true,",
				"     compressionCodec: 'none',",
				"     partitionFileNames:['fact_inventory.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> GOINVENTORY"
			]
		}
	}
}