{
	"name": "mapping salary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "db_anchrm",
						"type": "DatasetReference"
					},
					"name": "achrmEmployee"
				},
				{
					"dataset": {
						"referenceName": "db_achrm_bonus",
						"type": "DatasetReference"
					},
					"name": "achrmBonus"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "factSalary"
				}
			],
			"transformations": [
				{
					"name": "join1bonus"
				},
				{
					"name": "select1bonus"
				},
				{
					"name": "addColumns"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          emp_id as integer,",
				"          manager_id as integer,",
				"          emp_fname as string,",
				"          emp_lname as string,",
				"          dept_id as integer,",
				"          street as string,",
				"          city as string,",
				"          state as string,",
				"          zip_code as string,",
				"          phone as string,",
				"          status as string,",
				"          ss_number as string,",
				"          salary as decimal(15,5),",
				"          start_date as timestamp,",
				"          termination_date as string,",
				"          birth_date as timestamp,",
				"          bene_health_ins as string,",
				"          bene_life_ins as string,",
				"          bene_day_care as string,",
				"          sex as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> achrmEmployee",
				"source(output(",
				"          emp_id as integer,",
				"          bonus_date as timestamp,",
				"          bonus_amount as decimal(18,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> achrmBonus",
				"achrmEmployee, achrmBonus join(achrmEmployee@emp_id == achrmBonus@emp_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1bonus",
				"join1bonus select(mapColumn(",
				"          emp_id = achrmEmployee@emp_id,",
				"          dept_id,",
				"          salary,",
				"          start_date,",
				"          bonus_date,",
				"          bonus_amount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1bonus",
				"select1bonus derive(SalarypaymentID = concatWS('_', concatWS('_', toString(emp_id), toString(toDate(start_date))), toString(toDate(bonus_date))),",
				"          LocationID = concatWS('_', toString(emp_id), 'ANC','Employee'),",
				"          DateID = toDate(iif(isNull(bonus_date), start_date, bonus_date)) - toDate(toTimestamp('1970-01-01', 'yyyy-MM-dd')),",
				"          EmployeelID = concatWS('_', toString(emp_id), 'ANC'),",
				"          Bonus = iif(isNull(bonus_amount), toDecimal(0), bonus_amount)) ~> addColumns",
				"addColumns select(mapColumn(",
				"          salary,",
				"          SalarypaymentID,",
				"          LocationID,",
				"          DateID,",
				"          EmployeelID,",
				"          Bonus",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'fact_salary_ANC',",
				"     truncate: true,",
				"     compressionCodec: 'none',",
				"     partitionFileNames:['fact_salary_ANC.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> factSalary"
			]
		}
	}
}