{
	"name": "mapping_customer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dbGoRetailerSite",
						"type": "DatasetReference"
					},
					"name": "goCustomer"
				},
				{
					"dataset": {
						"referenceName": "dwh_dim_location",
						"type": "DatasetReference"
					},
					"name": "dimLocation"
				},
				{
					"dataset": {
						"referenceName": "anc_customer",
						"type": "DatasetReference"
					},
					"name": "ancCustomer"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "dimGoCustomer"
				},
				{
					"linkedService": {
						"referenceName": "lsconnection",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "joinLocationGo"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RETAILER_SITE_CODE as integer,",
				"          ADDRESS1 as string,",
				"          ADDRESS2 as string,",
				"          CITY as string,",
				"          REGION as string,",
				"          POSTAL_ZONE as string,",
				"          COUNTRY_CODE as integer,",
				"          ACTIVE_INDICATOR as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> goCustomer",
				"source(output(",
				"          LocationID as string,",
				"          Adress as string,",
				"          City as string,",
				"          Country as string,",
				"          State as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimLocation",
				"source(output(",
				"          id as integer,",
				"          fname as string,",
				"          lname as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          zip as string,",
				"          phone as string,",
				"          company_name as string,",
				"          type as string,",
				"          discount as integer,",
				"          max_quantity_order as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ancCustomer",
				"goCustomer derive(CustomerKey = concatWS('_', toString(RETAILER_SITE_CODE), \"GO\"),",
				"          CustomerLocation = concatWS('_', toString(RETAILER_SITE_CODE), \"GO_Retailer\"),",
				"          Discount = 0,",
				"          Name = '') ~> derivedColumn1",
				"dimLocation, derivedColumn1 join(LocationID == CustomerLocation,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationGo",
				"ancCustomer derive(CustomerKey = concatWS('_', toString(id), 'ANC')) ~> derivedColumn2",
				"derivedColumn2, dimLocation join(concatWS('_',CustomerKey,'Customer') == LocationID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"joinLocationGo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'dim_go_customer',",
				"     truncate: true,",
				"     compressionCodec: 'none',",
				"     partitionFileNames:['dim_go_customer.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> dimGoCustomer",
				"join2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'fsngroup6',",
				"     folderPath: 'dim_ANC_customer',",
				"     truncate: true,",
				"     compressionCodec: 'none',",
				"     filePattern:'dim_ANC_customer_stagging.parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}